БЕЗНОСОВ_АРТЁМ_К0611-23
БИЛЕТ_2




REST— паттерн взаимодействия компонентов системе, который чаще всего используется в веб-службах для обмена данными между клиентом и сервером.

В REST для реализации CRUD (Create, Read, Update, Delete) используются различные HTTP-методы для выполнения операций над ресурсами:

GET — используется для получения данных с сервера.
POST — применяется для отправки данных на сервер, например, для создания нового ресурса.
PUT — используется для обновления существующего ресурса или создания нового, если он ещё не существует.
DELETE — служит для удаления ресурса с сервера.
PATCH — применяется для частичного обновления ресурса, то есть изменения только определённых полей.

Команды REST соответствуют методам HTTP следующим образом:

Создание ресурса (Create) — соответствует методу POST.
Чтение (получение) ресурса (Read) — соответствует методу GET.
Обновление ресурса (Update) — соответствует методам PUT (полное обновление) и PATCH (частичное обновление).
Удаление ресурса (Delete) — соответствует методу DELETE.

Параметры для выполнения запроса могут передаваться различными способами:

Query-string в запросе  (например, ?param=value).
В теле запроса (для методов POST, PUT, PATCH).
С использованием доп. заголовков HTTP-запроса (начинаются с X-

HTTP-сервер возвращает коды состояния, которые указывают на результат обработки запроса:

200 OK — запрос успешно обработан.
201 Created — ресурс успешно создан.
400 Bad Request — запрос содержит ошибки и не может быть обработан.
401 Unauthorized — доступ к ресурсу запрещён из-за отсутствия или недостаточных прав доступа.
404 Not Found — ресурс не найден.
500 Internal Server Error — произошла ошибка на сервере при обработке запроса.
Существуют и другие коды ответов, которые могут быть возвращены сервером в зависимости от ситуации.

Результаты выполнения запроса: JSON или base64 (если мы говорим об условном файле или чем-то сложнее)


JSON —  структурированный текст в виде ключ-значение.
base64 — формат кодирования бинарных данных в текстовое представление, которое может быть передано через сети и декодировано обратно в исходные данные.

Особенности проектирования сервисов в соответствии с протоколом REST

При проектировании сервисов в соответствии с протоколом REST следует учитывать следующие особенности:

Сервис должен быть без сохранения состояния (stateless), то есть каждый запрос должен содержать всю необходимую информацию для его обработки.
Ресурсы должны быть чётко определены и доступны по уникальным URL-адресам.
Методы HTTP должны использоваться в соответствии с их предназначением (GET для чтения, POST для создания и т. д.).
Ответы должны возвращать соответствующие коды состояния HTTP и данные в нужном формате.
Плюсы и минусы использования протокола REST

Плюсы:

Простота и удобство использования.
Широкая поддержка и совместимость с различными платформами и языками программирования.
Гибкость и масштабируемость.
Возможность работы с различными форматами данных.
Минусы:

Отсутствие стандартизации некоторых аспектов (например, обработки ошибок).
Необходимость тщательного проектирования и документирования API.
Ограниченная поддержка транзакций и сложных операций.